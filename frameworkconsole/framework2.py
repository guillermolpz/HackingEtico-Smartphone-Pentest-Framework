#!/usr/bin/env python
__version__ = '0.2.7'

import os, re, serial, time, struct, pexpect, socket, zipfile, cmd
import xml.etree.ElementTree
from lib.config import Config
from lib.db import DB, DBException

config = Config('config')
webserver = config.get('WEBSERVER')
sqlserver = config.get('MYSQLSERVER')
ipaddress = config.get('IPADDRESS')
db = DB(config=config)
_type = config.get('DATABASETYPE')


class SPF(cmd.Cmd, object):

    def __init__(self):
        intro = '''################################################
#                                              #
# Welcome to the Smartphone Pentest Framework! #
#              Version: %s                  #
#       Georgia Wideman / Bulb Security        #
#                                              #
################################################
\n
Commands Available:
    agent ------------- see help agent to view full options
    command ----------- send commands to an agent
    info -------------- view information gathered
    modem ------------- attach framework to a mobile modem
    attack ------------ perform either remote attack or client side attack
    db ---------------- switch to db commands
    msf --------------- use metaspoit
    compile ----------- compile code to run on mobile devices
    install ----------- install stuff
    drozer ------------ use drozer
''' % __version__
        self.intro = '\n{0}\n'.format(intro)
        self.prompt = 'spf>'
        super(SPF, self).__init__()

    def do_exit(self, object):
        return True

    def can_exit(self):
        return True

    def help_exit(self):
        print '\nExit the interpreter.\nYou can also use Ctrl-D shortcut.\n'

    def emptyline(self):
        pass

    def help_agent(self):
        menu = '''Agent Options (use the following after agent (ex: agent cmd):

    deployed ------------- attach to a deployed agent
    generate ------------- generate agent app
    web ------------------ copy agent to web server
    import --------------- import agent template
    backdoor ------------- backdoor android apk with agent
    key ------------------ create apk signing key'''
        print ('\n{0}\n'.format(menu))

    def do_agent(self, line):
        commands = ['deployed', 'generate', 'web', 'import', 'backdoor', 'key']
        try:
            check = '(' + ')|('.join(commands) + ')'
            if re.match(check, line):
                if re.match(r'deployed', line, re.M | re.I):
                    self.deployed()
                elif re.match(r'generate', line, re.M | re.I):
                    self.generate()
                elif re.match(r'generate', line, re.M | re.I):
                    self.web()
                elif re.match(r'import', line, re.M | re.I):
                    self.import_agent()
                elif re.match(r'backdoor', line, re.M | re.I):
                    self.backdoor()
                elif re.match(r'key', line, re.M | re.I):
                    self.key()
            else:
                print ('[!]Agent command error! Please run help agent for a'
                ' list of commands available.')
                return False
        except Exception, e:
            print ('[!] Exception: "{0}"'.format(e))

    def deployed(self):
        print ('Attach to a deployed agent\n')
        path = raw_input('Agent URL Path: ').strip()
        key = raw_input('Agent Control Key: ').strip()
        method = raw_input('Communication Method(SMS/HTTP): ').strip()
        verify = '''\n\nURL Path: {0}
Control Key: {1}
Communication Method: {2}
\nIs this correct(y/N): '''
        confirm = raw_input(verify.format(path, key, method))
        if confirm.lower() is 'y':
            if path is not None:
                pass
            if method.lower() is 'http':
                command = key + ' ATTA WEB'
                control = webserver + path + '/control'
                with open(control) as f:
                    f.write(command)
                time.sleep(60)
                text = webserver + path + '/text'
                with open(text) as f:
                    line = f.readline()
                    lines = line.split(',')
                    try:
                        phonenumber = lines[1]
                    except IndexError:
                        phonenumber = None
                    try:
                        platform = lines[2]
                    except IndexError:
                        platform = None
                    try:
                        phonenumber2 = lines[3]
                    except IndexError:
                        phonenumber2 = None
                    try:
                        osversion = lines[4]
                    except IndexError:
                        osversion = None
                    f.write("")
                self.database_add(phonenumber, path, key, phonenumber2,
                    platform, osversion)
                if _type is 'postgres':
                    query = 'SELECT id from agents where number=\"{0}\"'\
                    .format(phonenumber)
                elif _type is 'mysql':
                    phonenumberr = '\"{0}\"'.format(phonenumber)
                    query = 'SELECT id from agents where number={0}'.format(
                        phonenumberr)
                db.query(query)
                ids = db.fetchone()[0]
                startcommand = 'python agentpoll.py {0} {1} {2} > log2'.format(
                    path, key, str(ids))
                pid = os.fork()
                if pid is 0:
                    os.system(startcommand)
            elif method.lower() is 'sms':
                print 'sms'

    def database_add(self, number, path, key, number2, platform, osversion):
        table = 'agents'
        table2 = 'data'
        db.query('INSERT INTO {0}(id, number, path, controlkey, controlnumber,'
        'platform, osversion) VALUES (DEFAULT, {1}, {2}, {3}, {4}, {5}, {6})'
        .format(table, number, path, key, number2, platform, osversion))
        db.query('INSERT INTO {0}(id, sms, contacts, picture, root, packages,'
        'apk) VALUES (DEFAULT, NULL, NULL, NULL, NULL, NULL, NULL'
        .format(table2))

    def generate(self):
        pass

    def web(self):
        pass

    def import_agent(self):
        pass

    def backdoor(self):
        pass

    def key(self):
        pass


def main():
    try:
        interpreter = SPF()
        interpreter.cmdloop()
    except (KeyboardInterrupt):
        print ('\n[-] Exiting ... ')

if __name__ == '__main__':
    main()